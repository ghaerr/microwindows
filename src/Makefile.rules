##############################################################################
# Microwindows rules Makefile
# Copyright (c) 2000 Martin Jolicoeur, Greg Haerr
# Portions Copyright (c) 2002 by Koninklijke Philips Electronics N.V.
#
# This makefile should be placed at the top of a project hierarchy
#
# NOTE: The MW_DIR_SRC environment variable should be set to that top directory
##############################################################################

##############################################################################
# Handle core engine/library options
##############################################################################

#$(info MAKELEVEL $(MAKELEVEL))

# Arch.rules will add platform-specific options to these flags
CFLAGS=
WARNINGS=
# INCLUDEDIRS is += and EXTRAFLAGS= not here for their use in submakefiles before they include Makefile.rules
INCLUDEDIRS += -I$(MW_DIR_SRC)/include
#LDFLAGS = -L$(MW_DIR_LIB)
LDFLAGS=
DEFINES=
HOSTCFLAGS=
HOSTLDFLAGS=
MAKEDEPCFLAGS=
MAKEOPTS=

#EXTENGINELIBS=
MWINLIBS=
NANOXCLIENTLIBS=

##############################################################################
# Handle File I/O options
##############################################################################
ifeq ($(HAVE_FILEIO), Y)
DEFINES += -DHAVE_FILEIO=1

ifeq ($(HAVE_JPEG_SUPPORT), Y)
DEFINES += -DHAVE_JPEG_SUPPORT=1
EXTENGINELIBS += $(LIBJPEG)
ifneq ($(INCJPEG),)
INCLUDEDIRS += -I$(INCJPEG)
endif
endif

ifeq ($(HAVE_PNG_SUPPORT), Y)
DEFINES += -DHAVE_PNG_SUPPORT=1
EXTENGINELIBS += $(LIBPNG) $(LIBZ) 
ifneq ($(INCPNG),)
INCLUDEDIRS += -I$(INCPNG)
endif
ifneq ($(INCZ),)
INCLUDEDIRS += -I$(INCZ)
endif
LDFLAGS += $(LIBM)
endif

ifeq ($(HAVE_TIFF_SUPPORT), Y)
DEFINES += -DHAVE_TIFF_SUPPORT=1
EXTENGINELIBS += $(LIBTIFF)
LDFLAGS += $(LIBM)
ifneq ($(INCTIFF),)
INCLUDEDIRS += -I$(INCTIFF)
endif
endif

ifeq ($(HAVE_BMP_SUPPORT), Y)
DEFINES += -DHAVE_BMP_SUPPORT=1
endif

ifeq ($(HAVE_GIF_SUPPORT), Y)
DEFINES += -DHAVE_GIF_SUPPORT=1
endif

ifeq ($(HAVE_PNM_SUPPORT), Y)
DEFINES += -DHAVE_PNM_SUPPORT=1
endif

ifeq ($(HAVE_XPM_SUPPORT), Y)
DEFINES += -DHAVE_XPM_SUPPORT=1
endif

##############################################################################
# Handle font options requireing HAVE_FILEIO
##############################################################################
ifeq ($(HAVE_FNT_SUPPORT), Y)
DEFINES += -DHAVE_FNT_SUPPORT=1
DEFINES += -DFNT_FONT_DIR="\"$(FNT_FONT_DIR)"\"
ifeq ($(HAVE_FNTGZ_SUPPORT), Y)
DEFINES += -DHAVE_FNTGZ_SUPPORT=1
EXTENGINELIBS += $(LIBZ)
endif
endif

ifeq ($(HAVE_T1LIB_SUPPORT), Y)
DEFINES += -DHAVE_T1LIB_SUPPORT=1
DEFINES += -DT1LIB_FONT_DIR="\"$(T1LIB_FONT_DIR)"\"
EXTENGINELIBS += $(LIBT1LIB)
ifneq ($(INCT1LIB),)
INCLUDEDIRS += -I$(INCT1LIB)
endif
LDFLAGS += $(LIBM)
endif

ifeq ($(HAVE_PCF_SUPPORT), Y)
DEFINES += -DHAVE_PCF_SUPPORT=1
DEFINES += -DPCF_FONT_DIR="\"$(PCF_FONT_DIR)"\"
ifeq ($(HAVE_PCFGZ_SUPPORT), Y)
DEFINES += -DHAVE_PCFGZ_SUPPORT=1
EXTENGINELIBS += $(LIBZ)
endif
endif

ifeq ($(HAVE_HZK_SUPPORT), Y)
DEFINES += -DHAVE_HZK_SUPPORT=1
DEFINES += -DHZK_FONT_DIR="\"$(HZK_FONT_DIR)"\"
endif

ifeq ($(HAVE_HBF_SUPPORT), Y)
DEFINES += -DHAVE_HBF_SUPPORT=1
endif

ifeq ($(HAVE_BIG5_SUPPORT), Y)
DEFINES += -DHAVE_BIG5_SUPPORT=1
endif

ifeq ($(HAVE_GB2312_SUPPORT), Y)
DEFINES += -DHAVE_GB2312_SUPPORT=1
endif

ifeq ($(HAVE_JISX0213_SUPPORT), Y)
DEFINES += -DHAVE_JISX0213_SUPPORT=1
endif

ifeq ($(HAVE_KSC5601_SUPPORT), Y)
DEFINES += -DHAVE_KSC5601_SUPPORT=1
endif

ifeq ($(HAVE_EUCJP_SUPPORT), Y)
DEFINES += -DHAVE_EUCJP_SUPPORT=1
DEFINES += -DEUCJP_FONT_DIR=\"$(EUCJP_FONT_DIR)\"
endif

endif	# HAVE_FILEIO

# Don't need FILEIO support for FreeType 2, since it can load from memory buffers.
ifeq ($(HAVE_FREETYPE_2_SUPPORT), Y)
DEFINES += -DHAVE_FREETYPE_2_SUPPORT=1
DEFINES += -DFREETYPE_FONT_DIR=\"$(FREETYPE_FONT_DIR)\"
EXTENGINELIBS += $(LIBFT2LIB)
# GCC 3.2 complains if system directories (e.g. /usr/include) are
# specified with "-I".  For most INCxxx, we simply allow the
# value to be set to empty to mean "no -I required".
# Since FT2 requires $(INCFT2LIB)/freetype2 to always be
# specified, we take a slightly different (and less reliable)
# approach and simply skip the well-known system directories.
ifneq ($(INCFT2LIB),/usr/include)
ifneq ($(INCFT2LIB),/usr/local/include)
ifneq ($(INCFT2LIB),)
INCLUDEDIRS += -I$(INCFT2LIB)
endif
endif
endif
ifneq ($(INCFT2LIB),)
INCLUDEDIRS += -I$(INCFT2LIB)/freetype2
endif
ifeq ($(HAVE_HARFBUZZ_SUPPORT),Y)
DEFINES += -DHAVE_HARFBUZZ_SUPPORT=1
endif
endif

ifeq ($(HAVE_FRIBIDI_SUPPORT), Y)
DEFINES += -DHAVE_FRIBIDI_SUPPORT=1
ifneq ($(INCFRIBIDI),)
INCLUDEDIRS += -I$(INCFRIBIDI)
endif
ifneq ($(LIBFRIBIDI),)
EXTENGINELIBS += $(LIBFRIBIDI)
endif
endif

ifeq ($(HAVE_SHAPEJOINING_SUPPORT), Y)
DEFINES += -DHAVE_SHAPEJOINING_SUPPORT=1
endif

ifeq ($(NOFONTS), Y)
DEFINES += -DNOFONTS=1
endif

##############################################################################
# Handle general config options
##############################################################################
ifeq ($(VERBOSE), N)
.SILENT:					# silences command executions
endif

ifeq ($(PARALLEL), Y)
MAKEOPTS += -j
endif

ifeq ($(SCREEN), X11)
DEFINES += -DX11=1
ifneq ($(X11HDRLOCATION),)
INCLUDEDIRS += -I$(X11HDRLOCATION)
endif
ifneq ($(X11LIBLOCATION),)
LDFLAGS += -L$(X11LIBLOCATION)
endif
LDFLAGS += -lX11
# Use the following on LINUX instead of -lX11 above to link X11 apps linked using
# -lNX11 -lnano-X running on X11. Use standalone libnano-X.a built with (LINK_APP_INTO_SERVER=Y).
# Local resolution of X11 symbols using -Bsymbolic requires linking in libX11.a on LINUX
#LDFLAGS += -Wl,-Bsymbolic \
	$(X11LIBLOCATION)/libX11.a \
	$(X11LIBLOCATION)/libxcb.a \
	$(X11LIBLOCATION)/libXdmcp.a \
#	$(X11LIBLOCATION)/libXau.a 	# error, not compiled -fpic \
	-ldl
endif

ifeq ($(FBEMULATOR), Y)
ifneq ($(X11HDRLOCATION),)
HOSTCFLAGS += -I$(X11HDRLOCATION)
endif
ifneq ($(X11LIBLOCATION),)
HOSTLDFLAGS += -L$(X11LIBLOCATION)
endif
HOSTLDFLAGS += -lX11
endif

ifeq ($(BIGENDIAN), Y)
DEFINES += -DMW_CPU_BIG_ENDIAN=1
endif

ifeq ($(THREADSAFE), Y)
DEFINES += -DTHREADSAFE=1
#LDFLAGS += -lpthread
endif

ifeq ($(HAVE_SHAREDMEM_SUPPORT), Y)
DEFINES += -DHAVE_SHAREDMEM_SUPPORT=1
endif

ifeq ($(LINK_APP_INTO_SERVER), Y)
DEFINES += -DNONETWORK=1
endif

ifeq ($(NUKLEARUI), N)
DEFINES += -DNUKLEARUI=0
endif

ifeq ($(NANOWM), N)
DEFINES += -DNANOWM=0
endif

ifeq ($(ERASEMOVE), N)
DEFINES += -DERASEMOVE=0
endif

ifeq ($(UPDATEREGIONS), N)
DEFINES += -DUPDATEREGIONS=0
endif

ifeq ($(NOCLIPPING), Y)
DEFINES += -DNOCLIPPING=1
endif

ifeq ($(HAVETEXTMODE), Y)
DEFINES += -DHAVE_TEXTMODE=1
endif

ifeq ($(VTSWITCH), Y)
DEFINES += -DVTSWITCH=1
endif

##############################################################################
# Handle application build options
##############################################################################
ifeq ($(MICROWINMULTIAPP), Y)
DEFINES += -DMULTIAPP=1
endif

ifeq ($(HAVE_VNCSERVER_SUPPORT), Y)
DEFINES += -DHAVE_VNCSERVER=1
ifneq ($(INCNVC),)
INCLUDEDIRS += -I$(INCVNC)
endif
ifneq ($(INCZ),)
INCLUDEDIRS += -I$(INCZ)
endif
ifeq ($(VNCSERVER_PTHREADED), Y)
DEFINES += -DVNCSERVER_PTHREADED=1
LDFLAGS += -lpthread 
endif
endif

##############################################################################
# Handle screen, keyboard and mouse config options
##############################################################################
DEFINES += -DMWPIXEL_FORMAT=$(SCREEN_PIXTYPE)
HOSTCFLAGS += -DMWPIXEL_FORMAT=$(SCREEN_PIXTYPE)
# Some screen drivers use SCREEN_PIXTYPE instead of MWPIXEL_FORMAT (FIXME)
DEFINES += -DSCREEN_PIXTYPE=$(SCREEN_PIXTYPE)

ifdef SCREEN_HEIGHT
DEFINES += -DSCREEN_HEIGHT=$(SCREEN_HEIGHT)
HOSTCFLAGS += -DSCREEN_HEIGHT=$(SCREEN_HEIGHT)
endif

ifdef SCREEN_WIDTH
DEFINES += -DSCREEN_WIDTH=$(SCREEN_WIDTH)
HOSTCFLAGS += -DSCREEN_WIDTH=$(SCREEN_WIDTH)
endif

ifdef SCREEN_DEPTH
DEFINES += -DSCREEN_DEPTH=$(SCREEN_DEPTH)
HOSTCFLAGS += -DSCREEN_DEPTH=$(SCREEN_DEPTH)
endif

ifeq ($(USE_EXPOSURE), N)
DEFINES += -DUSE_EXPOSURE=0
endif

ifeq ($(FBREVERSE), Y)
DEFINES += -DINVERT4BPP=1 -DINVERT2BPP=1
endif

ifeq ($(KEYBOARD), 2NDKBD)
DEFINES += -DMW_FEATURE_TWO_KEYBOARDS=1
endif

##############################################################################
# Setup libraries and command line libs for mwin API and nanox API linking
##############################################################################

# mwin API apps
ifeq ($(SHAREDLINK), Y)
MWINLIBS += $(MW_DIR_LIB)/libmwin.so
else
MWINLIBS += $(MW_DIR_LIB)/libmwin.a
endif
MWINLIBS += $(MW_DIR_LIB)/libmwimages.a
LDFLAGS += $(EXTENGINELIBS) $(LIBM)

# FIXME nanox API apps use .a even when link_app_into_server
ifeq ($(SHAREDLINK), Y)
NANOXCLIENTLIBS += $(MW_DIR_LIB)/libnano-X.so
else
NANOXCLIENTLIBS += $(MW_DIR_LIB)/libnano-X.a
endif

# standalone apps require external engine libs
ifeq ($(LINK_APP_INTO_SERVER), Y)
NANOXCLIENTLIBS +=
#LDFLAGS += $(EXTENGINELIBS)		# already done for mwin API above
endif

##############################################################################
# Include platform-specific compiler and linker flags, defines and locations
##############################################################################
include $(MW_DIR_SRC)/Arch.rules

##############################################################################
# Create tool paths, compile/link arguments, dependency dirs
##############################################################################

# Create full tool paths
CC = $(TOOLSPREFIX)$(COMPILER)
CXX = $(TOOLSPREFIX)$(CXX_COMPILER)
AR = $(TOOLSPREFIX)$(ARCHIVER)
LD = $(TOOLSPREFIX)$(LINKER)

# When cross-compiling, we want to use the target headers for
# generating dependencies (MAKEDEPCFLAGS), but the host's default
# headers for compiling tools (HOSTCFLAGS).
# Note: We don't put INCLUDEDIRS in HOSTCFLAGS.
MAKEDEPCFLAGS += $(INCLUDEDIRS)

# Aggegrate flags, warnings, include dirs, defines, and extraflags for C compiler
COMPILEARGS = $(CFLAGS) $(WARNINGS) $(INCLUDEDIRS) $(DEFINES) $(EXTRAFLAGS)
# C++ uses only cxx flags and include dirs
CXXCOMPILEARGS = $(CXXFLAGS) $(INCLUDEDIRS)
#LINKARGS = $(CFLAGS) $(LDFLAGS) $(OBJS) $(LIBS) $(LDLIBS)

##############################################################################
# Variable Exports
##############################################################################
# exports for internal make system
export MW_DIR_SRC MW_DIR_BIN MW_DIR_LIB MW_DIR_OBJ CONFIG

# exports useable by contrib/ builds
export LDFLAGS LIBFLEX
#export COMPILEARGS

#$(info    LDFLAGS is $(LDFLAGS))

ifeq ($(VERBOSE), Y)
$(info    MWINLIBS is $(MWINLIBS))
$(info    NANOXCLIENTLIBS is $(NANOXCLIENTLIBS))
$(info    EXTENGINELIBS is $(EXTENGINELIBS))
$(info    CFLAGS is $(CFLAGS))
$(info    WARNINGS is $(WARNINGS))
$(info    INCLUDEDIRS is $(INCLUDEDIRS))
$(info    DEFINES is $(DEFINES))
$(info    EXTRAFLAGS is $(EXTRAFLAGS))
$(info    LDFLAGS is $(LDFLAGS))
$(info    COMPILEARGS $(COMPILEARGS))
endif

##############################################################################
# Build rules
##############################################################################

.PHONY: default subdirs clean cleanapps xconfig makedestdirs

# Do not use standard rules such as .c.o
.SUFFIXES:

# Do not delete "intermediate" files, such as the .c files created from bitmaps and fonts.
.SECONDARY:

#
# This is the default target
# It looks for sub-directories with makefiles in it and tries to execute them
#
DEFAULTTARGETS = $(MW_DIR_BIN) $(MW_DIR_LIB) subdirs $(MW_DIR_LIB)/$(LIBNAME)
ifeq ($(SHAREDLIBS), Y)
DEFAULTTARGETS += $(MW_DIR_LIB)/$(LIBNAMESO)
endif

default: $(DEFAULTTARGETS)

# 'dirs' can be pre-specified
ifeq ($(dirs), )
# Look for all subdirectories that contain a Makefile,
# but ignore the demos/ directory (if present).
# Save the list of directory names to $(dirs) - this
# variable is empty if the directories do not exist.
dirs := $(dir $(wildcard $(MW_DIR_SRC)/$(MW_DIR_RELATIVE)*/Makefile))
dirs := $(filter-out $(MW_DIR_SRC)/$(MW_DIR_RELATIVE)demos/,$(dirs))
dirs := $(filter-out $(MW_DIR_SRC)/$(MW_DIR_RELATIVE)test/,$(dirs))		# FIXME
dirs := $(filter-out $(MW_DIR_SRC)/$(MW_DIR_RELATIVE)ptest/,$(dirs))	# FIXME
dirs := $(filter-out $(MW_DIR_SRC)/$(MW_DIR_RELATIVE)ecos/,$(dirs))
dirs := $(filter-out $(MW_DIR_SRC)/$(MW_DIR_RELATIVE)rtems/,$(dirs))
endif
ifeq ($(VERBOSE), Y)
$(info    dirs is $(dirs))
endif

# 'demos' can be pre-specified
ifeq ($(demos), )
# Look for the subdirectory demos/ that contains a Makefile,
# if present.
# Save the directory name to $(demos) - this variable is
# empty if the directory does not exist.
demos := $(dir $(wildcard $(MW_DIR_SRC)/$(MW_DIR_RELATIVE)demos/Makefile))
endif

#
# Subdirectories target
#
# For each directory DIRNAME in $(dirs), we create a phony target
# called "subdir-DIRNAME".  To build that target, we recurse into
# the directory with "$(MAKE) -C DIRNAME".
#
ifeq ($(ARCH), AJAGUAR)
	$(MAKE) $(MAKEOPTS) -C drivers
	$(MAKE) $(MAKEOPTS) -C engine
	$(MAKE) $(MAKEOPTS) -C fonts
	$(MAKE) $(MAKEOPTS) -C images
	$(MAKE) $(MAKEOPTS) -C mwin
	$(MAKE) $(MAKEOPTS) -C mwin/winlib
else
.PHONY: subdirs $(dirs:%=subdir-%)
subdirs: $(dirs:%=subdir-%)
	@# 
$(dirs:%=subdir-%): makedestdirs
	$(MAKE) $(MAKEOPTS) -C $(subst subdir-,,$@)

makedestdirs:
ifeq ($(ARCH), DJGPP)
	$(shell set CURDIR=$(pwd);)
	[ -d $(MW_DIR_BIN) ] || mkdir $(MW_DIR_BIN)
	[ -d $(MW_DIR_LIB) ] || mkdir $(MW_DIR_LIB)
endif
	@#
endif

#
# This rule creates the directory for the target.
#
define MW_RULE_MAKE_TARGET_DIR
[ -d $(dir $@) ] || mkdir -p $(dir $@)
endef

#
# If a library name is specified,
# a library of that name will be created with objects in that directory
#
ifneq ($(LIBNAME),)
$(MW_DIR_LIB)/$(LIBNAME): $(OBJS) $(CXXOBJS)
	@echo "Creating library $(patsubst $(MW_DIR_LIB)/%,%,$@) ..."
	$(AR) $(ARFLAGS) $(MW_DIR_LIB)/$(LIBNAME) $(OBJS) $(CXXOBJS)
endif

#
# If a shared object library name is specified, create it from OBJS
#
ifeq ($(SHAREDLIBS), Y)
ifneq ($(LIBNAMESO),)		# stop circular dependecy when no LIBNAMESO in current Makefile
$(MW_DIR_LIB)/$(LIBNAMESO): $(MW_DIR_LIB)/$(LIBNAME) $(OBJS) $(CXXOBJS)
	@echo "Creating shared library $(patsubst $(MW_DIR_LIB)/%,%,$@) ..."
ifeq ($(ARCH), MACOSX)
	$(CC) -shared -fpic -undefined dynamic_lookup -o $@ $(LDFLAGS) $(OBJS) $(CXXOBJS)
else
	$(CC) -shared -o $@ -Wl,--whole-archive $(OBJS) $(CXXOBJS) -Wl,--no-whole-archive
endif
endif
endif

#
# Make sure that bin and lib directories exist
#
$(MW_DIR_BIN) $(MW_DIR_LIB): 
	@mkdir -p $@

#
# This rule generates a dependencies *.d file from a C or C++ source file.
# The .d file is placed in the same directory as the .o file.
#
# The sed script replaces the short .o filename produced by gcc with the
# full filename used by make.  This is only necessary if make is using
# a filename including a directory part, since some [all?] versions of
# gcc will remove the directory.  However, it does not hurt to always
# use the sed script.
#
# Note that on error, this rule removes the (incomplete) .d file, and
# also removes the .o file so that the rule will be run again next
# time the user runs make.
define MW_RULE_DEPEND_C
	$(HOSTCC) -MM $(MAKEDEPCFLAGS) $(DEFINES) $< \
		| sed 's/.*\.o[ :]*/$(subst /,\/,$@) : /g' \
		> $(basename $@).d \
		|| (rm $@ $(basename $@).d ; exit 1)
endef

#
# Compilation target for C files
#
$(MW_DIR_OBJ)/%.o: $(MW_DIR_SRC)/%.c $(CONFIG)
	@echo "Compiling $(patsubst $(MW_DIR_SRC)/%,%,$<) ..."
ifneq ($(MW_DIR_OBJ),$(MW_DIR_SRC))
	@$(MW_RULE_MAKE_TARGET_DIR)
endif
	$(CC) -c $(COMPILEARGS) -o $@ $<
	$(MW_RULE_DEPEND_C)

ifneq ($(MW_DIR_OBJ),$(MW_DIR_SRC))
#
# Compilation target for generated C files
# (e.g. C files generated from bitmaps, fonts, etc)
#
$(MW_DIR_OBJ)/%.o: $(MW_DIR_OBJ)/%.c $(CONFIG)
	@echo "Compiling $(patsubst $(MW_DIR_OBJ)/%,%,$<) ..."
	@$(MW_RULE_MAKE_TARGET_DIR)
	$(CC) -c $(COMPILEARGS) -o $@ $<
	$(MW_RULE_DEPEND_C)
endif

#
# Compilation target for C++ files
#
$(MW_DIR_OBJ)/%.o: $(MW_DIR_SRC)/%.cpp $(CONFIG)
	@echo "Compiling $(patsubst $(MW_DIR_SRC)/%,%,$<) ..."
ifneq ($(MW_DIR_OBJ),$(MW_DIR_SRC))
	@$(MW_RULE_MAKE_TARGET_DIR)
endif
	$(CXX) -c $(CXXCOMPILEARGS) -o $@ $<
	$(MW_RULE_DEPEND_C)

ifneq ($(MW_DIR_OBJ),$(MW_DIR_SRC))
#
# Compilation target for generated C++ files
#
$(MW_DIR_OBJ)/%.o: $(MW_DIR_OBJ)/%.cpp $(CONFIG)
	@echo "Compiling $(patsubst $(MW_DIR_OBJ)/%,%,$<) ..."
	@$(MW_RULE_MAKE_TARGET_DIR)
	$(CXX) -c $(CXXCOMPILEARGS) -o $@ $<
	$(MW_RULE_DEPEND_C)
endif

#
# Compilation target for bmp file conversion
#
$(MW_DIR_OBJ)/%.c: $(MW_DIR_SRC)/%.bmp $(MW_DIR_BIN)/convbmp $(MW_DIR_BIN)/convbdf
	echo "Converting $(patsubst $(MW_DIR_SRC)/%,%,$<) ..."
ifneq ($(MW_DIR_OBJ),$(MW_DIR_SRC))
	@$(MW_RULE_MAKE_TARGET_DIR)
endif
	$(MW_DIR_BIN)/convbmp -o $@ $<

#
# Compilation target for tool that does bmp file conversion
#
$(MW_DIR_BIN)/convbmp: $(MW_DIR_SRC)/images/tools/convbmp.c
	echo "Building $(patsubst $(MW_DIR_BIN)/%,%,$@) tool ..."
	$(HOSTCC) $(HOSTCFLAGS) $< -o $@

#
# Compilation target for bdf font file conversion
#
$(MW_DIR_OBJ)/%.c: $(MW_DIR_SRC)/%.bdf $(MW_DIR_BIN)/convbdf
	echo "Converting $(patsubst $(MW_DIR_SRC)/%,%,$<) ..."
ifneq ($(MW_DIR_OBJ),$(MW_DIR_SRC))
	@$(MW_RULE_MAKE_TARGET_DIR)
endif
	$(MW_DIR_BIN)/convbdf -c -o $@ $<

#
# Compilation target for tool that does bdf font file conversion
#
$(MW_DIR_BIN)/convbdf: $(MW_DIR_SRC)/fonts/tools/convbdf.c
	echo "Building $(patsubst $(MW_DIR_BIN)/%,%,$@) tool ..."
	$(HOSTCC) $(HOSTCFLAGS) $< -o $@

xconfig:
	./xconfigure

# don't clean lib dir
cleanapps:
ifneq ($(MW_DIR_OBJ),$(MW_DIR_SRC))
	@echo "Cleaning $(MW_DIR_RELATIVE) ..."
	$(RM) -rf $(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)
#	$(RM) -rf $(MW_DIR_BIN)/
#	mkdir $(MW_DIR_BIN)
endif
	@echo "Cleaning directory $(MW_DIR_RELATIVE) ..."
	$(RM) \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)core \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*~ \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*.bak \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*.o \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*.d \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)TAGS \
		$(MW_DIR_BIN)/*
	$(foreach dir, $(dirs), $(MAKE) -C $(dir) cleanapps;)
	$(foreach dir, $(demos), $(MAKE) -C $(dir) cleanapps;)

clean:
ifneq ($(MW_DIR_OBJ),$(MW_DIR_SRC))
	@echo "Cleaning $(MW_DIR_RELATIVE) ..."
	$(RM) -rf $(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)
#	$(RM) -rf $(MW_DIR_BIN)/ $(MW_DIR_LIB)/
#	mkdir $(MW_DIR_BIN)
#	mkdir $(MW_DIR_LIB)
endif
	@echo "Cleaning directory $(MW_DIR_RELATIVE) ..."
	$(RM) \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)core \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*~ \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*.bak \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*.o \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*.d \
		$(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)TAGS \
		$(MW_DIR_LIB)/*.a \
		$(MW_DIR_LIB)/*.so \
		$(MW_DIR_LIB)/*.so.* 
	for file in $(wildcard $(MW_DIR_BIN)/*); do \
		if [ ! -d $$file ]; then \
			$(RM) $$file; \
		fi; \
	done
	$(foreach dir, $(dirs), $(MAKE) -C $(dir) clean;)
	$(foreach dir, $(demos), $(MAKE) -C $(dir) clean;)
#	$(foreach dir, $(nx11), $(MAKE) -C $(dir) clean;)
	-rm -f /tmp/.nano-X

# avoid multiple calls to clean FIXME
ifneq ("$(wildcard contrib/TinyWidgets/lib/*.a)","")
	@echo "Cleaning TinyWidgets"
	$(MAKE) -C $(MW_DIR_SRC)/contrib/TinyWidgets clean
endif

cleanusr:
	-rm -f /usr/bin/nano-X
	-rm -f /usr/bin/nanowm
	-rm -f /usr/lib/libnano-X.a
	-rm -f /usr/lib/libnano-X.so
	-rm -f /usr/lib/libNX11.a
	-rm -f /usr/lib/libNX11.so
	-rm -f /usr/lib/libmwengine.a
	-rm -f /usr/lib/libmwimages.a
	-rm -f /usr/lib/libmwin.a
	-rm -f /usr/lib/libmwin.so
	-rm -f /usr/lib64/libnano-X.a
	-rm -f /usr/lib64/libnano-X.so
	-rm -f /usr/lib64/libNX11.a
	-rm -f /usr/lib64/libNX11.so
	-rm -f /usr/lib64/libmwengine.a
	-rm -f /usr/lib64/libmwimages.a
	-rm -f /usr/lib64/libmwin.a
	-rm -f /usr/lib64/libmwin.so
	-rm -f /usr/lib/libtnW.a
	
# install directories for headers and libraries
ifeq ($(ARCH), RTEMS)
  INSTALL_PREFIX  = INSTALL_PREFIX_SHOULD_NOT_BE_USED_FOR_RTEMS 
  INSTALL_OWNER1  = 
  INSTALL_OWNER2  = 
  HDRINSTALLDIR = $(RTEMS_MAKEFILE_PATH)/lib/include
  LIBINSTALLDIR = $(RTEMS_MAKEFILE_PATH)/lib
  BININSTALLDIR = $(RTEMS_MAKEFILE_PATH)/bin
else
  INSTALL_PREFIX  = /usr
  INSTALL_OWNER1  = -o root -g root
  INSTALL_OWNER2  = -o root -g bin
  HDRINSTALLDIR = $(INSTALL_PREFIX)/include/microwin
  LIBINSTALLDIR = $(INSTALL_PREFIX)/lib
  BININSTALLDIR = $(INSTALL_PREFIX)/bin
endif

INSTALL_DIR   = install -c -m 755 $(INSTALL_OWNER1) -d
INSTALL_HDR   = install -c -m 644 $(INSTALL_OWNER2)
INSTALL_LIB   = install -c -m 644 $(INSTALL_OWNER2)
INSTALL_BIN   = install -c -m 755 $(INSTALL_OWNER2)

install:
	$(INSTALL_DIR) $(HDRINSTALLDIR)
	echo "Copying hdrs to $(HDRINSTALLDIR)"
	$(INSTALL_HDR) $(MW_DIR_SRC)/include/*.h $(HDRINSTALLDIR)
	echo "Copying libs to $(LIBINSTALLDIR)"
	$(INSTALL_DIR) $(LIBINSTALLDIR)
	$(INSTALL_LIB) $(MW_DIR_LIB)/*.a $(LIBINSTALLDIR)
	#if 64bit system, install in /usr/lib64 too
	if [ -d "$(LIBINSTALLDIR)64" ]; then \
	echo "Copying libs to $(LIBINSTALLDIR)64"; \
	$(INSTALL_LIB) $(MW_DIR_LIB)/*.a $(LIBINSTALLDIR)64; \
	fi
ifeq ($(SHAREDLIBS), Y)
	echo "Copying shared libs to $(LIBINSTALLDIR)"
	$(INSTALL_LIB) $(MW_DIR_LIB)/*.so $(LIBINSTALLDIR)
	#if 64bit system, install in /usr/lib64 too and copy logical links
	if [ -d "$(LIBINSTALLDIR)64" ]; then \
	echo "Copying shared libs to $(LIBINSTALLDIR)64"; \
	$(INSTALL_LIB) $(MW_DIR_LIB)/*.so $(LIBINSTALLDIR)64; \
	fi
else
	-rm -f $(LIBINSTALLDIR)/nano-X.so
	-rm -f $(LIBINSTALLDIR)64/nano-X.so
endif
ifeq ($(NANOX), Y)
ifeq ($(LINK_APP_INTO_SERVER), N)
	echo "Copying binaries to $(BININSTALLDIR)"
	$(INSTALL_DIR) $(BININSTALLDIR)
	$(INSTALL_BIN) $(MW_DIR_BIN)/nano-X $(BININSTALLDIR)
	
else # ==($(LINK_APP_INTO_SERVER), Y)
	-rm -f $(BININSTALLDIR)/nano-X
endif
else # ==($(NANOX), N)
	-rm -f $(BININSTALLDIR)/nano-X
endif
	echo "Installation completed successfully."

tags:
	-rm -f TAGS
	etags --language=c++ --append \
		`find . \( -name '*.h' -o -name '*.cc' \) -print`
	etags --language=c --append `find . -name \*.[hc] -print`
	etags --language=asm --append `find . -name \*.[Ss] -print`

##############################################################################
# Included dependency files
##############################################################################

ifneq ($(MAKECMDGOALS), clean)
ifneq ($(MAKECMDGOALS), cleandepend)
ifneq ($(MAKECMDGOALS), realclean)
ifneq ($(MAKECMDGOALS), xconfig)
ifneq ($(wildcard $(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*.d),)
-include $(wildcard $(MW_DIR_OBJ)/$(MW_DIR_RELATIVE)*.d)
endif
endif
endif
endif
endif
